// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { CreateTradeTradesPostData, CreateTradeTradesPostErrors, CreateTradeTradesPostResponses, CreateUserUsersPostData, CreateUserUsersPostErrors, CreateUserUsersPostResponses, GetReportReportGetData, GetReportReportGetResponses, GetUsersUsersGetData, GetUsersUsersGetResponses, ListTradesTradesGetData, ListTradesTradesGetResponses, LoginLoginPostData, LoginLoginPostErrors, LoginLoginPostResponses, ReadUsersMeUsersMeGetData, ReadUsersMeUsersMeGetResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Users
 */
export const getUsersUsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersUsersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersUsersGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options
    });
};

/**
 * Create User
 */
export const createUserUsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserUsersPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserUsersPostResponses, CreateUserUsersPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login
 */
export const loginLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginLoginPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginLoginPostResponses, LoginLoginPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Read Users Me
 */
export const readUsersMeUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUsersMeUsersMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * List Trades
 */
export const listTradesTradesGet = <ThrowOnError extends boolean = false>(options?: Options<ListTradesTradesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTradesTradesGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trades/',
        ...options
    });
};

/**
 * Create Trade
 */
export const createTradeTradesPost = <ThrowOnError extends boolean = false>(options: Options<CreateTradeTradesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTradeTradesPostResponses, CreateTradeTradesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trades/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Report
 */
export const getReportReportGet = <ThrowOnError extends boolean = false>(options?: Options<GetReportReportGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReportReportGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/report/',
        ...options
    });
};
