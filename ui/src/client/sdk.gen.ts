// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { CancelTradeTradesTradeIdCancelPostData, CancelTradeTradesTradeIdCancelPostErrors, CancelTradeTradesTradeIdCancelPostResponses, ChangeOwnPasswordUsersMeChangePasswordPostData, ChangeOwnPasswordUsersMeChangePasswordPostErrors, ChangeOwnPasswordUsersMeChangePasswordPostResponses, ChangeUserPasswordUsersUserIdChangePasswordPostData, ChangeUserPasswordUsersUserIdChangePasswordPostErrors, ChangeUserPasswordUsersUserIdChangePasswordPostResponses, CreateTradeTradesPostData, CreateTradeTradesPostErrors, CreateTradeTradesPostResponses, CreateUserUsersPostData, CreateUserUsersPostErrors, CreateUserUsersPostResponses, DeleteTradeTradesTradeIdDeleteData, DeleteTradeTradesTradeIdDeleteErrors, DeleteTradeTradesTradeIdDeleteResponses, DeleteUserUsersUserIdDeleteData, DeleteUserUsersUserIdDeleteErrors, DeleteUserUsersUserIdDeleteResponses, GetReportReportGetData, GetReportReportGetResponses, GetTradeTradesTradeIdGetData, GetTradeTradesTradeIdGetErrors, GetTradeTradesTradeIdGetResponses, GetUsersUsersGetData, GetUsersUsersGetResponses, GetUserUsersUserIdGetData, GetUserUsersUserIdGetErrors, GetUserUsersUserIdGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses, ListTradesTradesGetData, ListTradesTradesGetResponses, LoginLoginPostData, LoginLoginPostErrors, LoginLoginPostResponses, ReadUsersMeUsersMeGetData, ReadUsersMeUsersMeGetResponses, RootGetData, RootGetResponses, UpdateTradeTradesTradeIdPutData, UpdateTradeTradesTradeIdPutErrors, UpdateTradeTradesTradeIdPutResponses, UpdateUserUsersUserIdPutData, UpdateUserUsersUserIdPutErrors, UpdateUserUsersUserIdPutResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Users
 */
export const getUsersUsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersUsersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersUsersGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options
    });
};

/**
 * Create User
 */
export const createUserUsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserUsersPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserUsersPostResponses, CreateUserUsersPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User
 */
export const deleteUserUsersUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserUsersUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUserUsersUserIdDeleteResponses, DeleteUserUsersUserIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Get User
 */
export const getUserUsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserUsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserUsersUserIdGetResponses, GetUserUsersUserIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Update User
 */
export const updateUserUsersUserIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserUsersUserIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateUserUsersUserIdPutResponses, UpdateUserUsersUserIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change Own Password
 */
export const changeOwnPasswordUsersMeChangePasswordPost = <ThrowOnError extends boolean = false>(options: Options<ChangeOwnPasswordUsersMeChangePasswordPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ChangeOwnPasswordUsersMeChangePasswordPostResponses, ChangeOwnPasswordUsersMeChangePasswordPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change User Password
 */
export const changeUserPasswordUsersUserIdChangePasswordPost = <ThrowOnError extends boolean = false>(options: Options<ChangeUserPasswordUsersUserIdChangePasswordPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ChangeUserPasswordUsersUserIdChangePasswordPostResponses, ChangeUserPasswordUsersUserIdChangePasswordPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login
 */
export const loginLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginLoginPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginLoginPostResponses, LoginLoginPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Read Users Me
 */
export const readUsersMeUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUsersMeUsersMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * List Trades
 */
export const listTradesTradesGet = <ThrowOnError extends boolean = false>(options?: Options<ListTradesTradesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTradesTradesGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trades/',
        ...options
    });
};

/**
 * Create Trade
 */
export const createTradeTradesPost = <ThrowOnError extends boolean = false>(options: Options<CreateTradeTradesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTradeTradesPostResponses, CreateTradeTradesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trades/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Trade
 */
export const deleteTradeTradesTradeIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTradeTradesTradeIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTradeTradesTradeIdDeleteResponses, DeleteTradeTradesTradeIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trades/{trade_id}',
        ...options
    });
};

/**
 * Get Trade
 */
export const getTradeTradesTradeIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTradeTradesTradeIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTradeTradesTradeIdGetResponses, GetTradeTradesTradeIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trades/{trade_id}',
        ...options
    });
};

/**
 * Update Trade
 */
export const updateTradeTradesTradeIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTradeTradesTradeIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTradeTradesTradeIdPutResponses, UpdateTradeTradesTradeIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trades/{trade_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Cancel Trade
 */
export const cancelTradeTradesTradeIdCancelPost = <ThrowOnError extends boolean = false>(options: Options<CancelTradeTradesTradeIdCancelPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CancelTradeTradesTradeIdCancelPostResponses, CancelTradeTradesTradeIdCancelPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trades/{trade_id}/cancel',
        ...options
    });
};

/**
 * Get Report
 */
export const getReportReportGet = <ThrowOnError extends boolean = false>(options?: Options<GetReportReportGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReportReportGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/report/',
        ...options
    });
};

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};
